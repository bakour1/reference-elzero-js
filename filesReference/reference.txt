// Install Typescript And Transpile Files
{
  //  node -v                                       - Be Sure Nodejs Is Installed => Check From Terminal With Command
  // npm i -g typescript                            - Install Typescript
  // tsc -v                                         - Be Sure Typescript Is Installed => Check From Terminal With Command
  // tsc index.ts                                   - Compile JS File
}

// Create Configuration And Watch Files
{
  // tsc index.ts                                   - Compile JS File
  // tsc -h                                         - list help
  // tsc -w index.ts                                - watch live file.ts
  // tsc --init                                     - initialize json file

  // we are edit in tsconfig.json ----------------------
  // "rootDir": "./src"
  // "sourceMap": true
  // "outDir": "./dist"
  // "removeComments": true
}

// Statically vs Dynamically Typed Languages
{
  /*
  Statically Typed Language Like [Rust, C, C++]
    - Variables Types Are Static, Once You Declare It You Cannot Change
    - Type Of A Variable Is Known At Compile Time "Do Type Checking At Compile-Time"
      --- Have Better Performance At Run-Time Due To Not Needing To Check Types Dynamically
    - Error Detected Earlier

  Dynamically Typed Language Like [PHP, Python, JavaScript]
    - Variables Types Are Dynamic, You Can Always Change It
    - "Type Checking At Execution-Time"
    - Error Can Be Detected After Execution
  */
  // let num = 10;
  // num = "Elzero";
  // console.log(num);

  let age = 40;
  if ( age > 30 ) {
    console.log( "Good" );
  } else {
    console.log( age.repeat( 3 ) );
  }
}

// Type Annotations And Any Type
{
  /*
  Type Annotations || Signature
  -- Indicate The Data Type Of Variables
  -- Indicate The Data Type Of Functions Input/Output
  -- Objects, etc.

  - Why We Use It ?
  - Is It Mandatory ?
  - What Happen If We Didnt Use It ?
*/

  let theName = "Elzero";
  let theAge: number = 40;
  let hire: boolean = true;
  let all: any = "Elzero Web School";
  let allVars; // Any

  theName = "Osama";
  all = 100;

  function add ( n1: number, n2: number ) {
    return n1 + n2;
  }

  console.log( add( 10, 20 ) );
  console.log( typeof add( 10, 20 ) );

  function add ( n1, n2 ) {
    return n1 + n2;
  }

  console.log( add( 10, "20" ) );
  console.log( typeof add( 10, "20" ) );
}

// Type Annotations With Array
{
  /*
  Type Annotations With Arrays
*/

  let all: string | number | boolean = "Osama";

  all = "A";
  all = 100;
  all = true;

  let myFriends: string[] = [ "Osama", "Ahmed", "Sayed" ];

  for ( let i = 0; i < myFriends.length; i++ ) {
    console.log( myFriends[ i ].repeat( 3 ) );
  }
}

// Type Annotations With Multi-Dimensional Array
{
  /*
  Type Annotations With Multidimensional Arrays
*/

  let arrayOne: number[] = [ 1, 2, 3, 4, 5 ];
  let arrayTwo: string[] = [ "A", "B", "C" ];
  let arrayThree: ( string | number )[] = [ 1, 2, 3, 4, "A", "B", "C" ];

  let arrayFour: ( string | number | string[] | boolean )[] = [ 1, 2, 3, 4, "A", "B", [ "C", "D" ], true, false ];
}

// Type Annotations With Function
{
  /*
  Type Annotations With Functions

  - noImplicitAny

  - noImplicitReturns
  --- Will Check All Code Paths In A Function To Ensure They Return A Value

  - noUnusedLocals
  --- Report Errors On Unused Local Variables

  - noUnusedParameters
  --- Report Errors On Unused Parameters In Functions.
*/
  let showMsg = true;

  function showDetails ( name: string, age: number, salary: number ): string/* output=> */ {
    let test = 10;
    if ( showMsg ) {
      return `hello ${ name }, age is ${ age }, salary is ${ salary }, test var ${ test }`;
    }
    return 'no data to show';
  }

  console.log( showDetails( "sami", 29, 5000 ) );

}

// Optional And Default Parameter
{
  /*
  Function
  - Optional and Default Parameters

  - In JavaScript, Every Parameter Is Optional => "undefined" If You Didnt Use It
  - "?" Optional Parameter
*/

  function showData ( name?: string, age?: number, country?: string ) {
    return `${ name } - ${ age } - ${ country }`;
  }

  console.log( showData( "Osama", 40, "Egypt" ) );
}

// Function Rest Parameter
{
  /*
  Function
  - Rest Parameter
  - What About Float => All Is Under Type Number
  */

  function addAll ( ...nums: number[] ): number {
    let result = 0;
    for ( let i = 0; i < nums.length; i++ ) {
      result += nums[ i ];
    }
    // nums.forEach((num) => result += num);
    return result;
  }

  console.log( addAll( 10, 20, 30, 100, 10.5, +true ) );
}

// Anonymous And Arrow Function
{
  /*
  Function
  - Anonymous Function
  - Arrow Function
 */

  const add = function(num1: number, num2: number) : number {
    return num1 + num2;
  }

  console.log(add(10, 20));

  const addWithArrow = (num1: number, num2: number) : number => num1 + num2;

  console.log(addWithArrow(10, 20));
}
